(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{477:function(e,n,t){e.exports=t.p+"assets/img/container-structure.32f7cc02.svg"},478:function(e,n,t){e.exports=t.p+"assets/img/list-containers.e16871f2.png"},526:function(e,n,t){"use strict";t.r(n);var r=t(8),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"docker-host"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-host"}},[e._v("#")]),e._v(" ðŸ–¥ Docker Host")]),e._v(" "),r("h2",{attrs:{id:"einleitung"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#einleitung"}},[e._v("#")]),e._v(" Einleitung")]),e._v(" "),r("p",[e._v("Die Gruppe Adler verfÃ¼gt Ã¼ber einen Dedicated Server auf welchem zwei Virtuelle Maschinen laufen. Eine dieser VMs ist der "),r("em",[e._v("Docker Host")]),e._v(", auf welchem Services wie Blechadler, Homepage, CMS, Forum, API, Slotting und einige weitere Tools als jeweils ein/mehrere Docker Container laufen.")]),e._v(" "),r("h2",{attrs:{id:"zugriff-auf-vm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#zugriff-auf-vm"}},[e._v("#")]),e._v(" Zugriff auf VM")]),e._v(" "),r("p",[e._v("Genaueres zum Zugriff gibt es "),r("a",{attrs:{href:"https://github.com/gruppe-adler/ips-n-stuff",target:"_blank",rel:"noopener noreferrer"}},[e._v("hier"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("h2",{attrs:{id:"die-wichtigsten-container"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#die-wichtigsten-container"}},[e._v("#")]),e._v(" Die wichtigsten Container")]),e._v(" "),r("p",[e._v("Alle Applikationen (ein oder mehrere zusammenhÃ¶rigen Container) sind grundsÃ¤tzlich unabhÃ¤ngig von einander aufgebaut. Hierbei gibt es aber einige Ausnahmen:")]),e._v(" "),r("h3",{attrs:{id:"reverse-proxy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reverse-proxy"}},[e._v("#")]),e._v(" Reverse Proxy")]),e._v(" "),r("p",[e._v("Da mehrere Applikationen von auÃŸen auf Port 80 "),r("em",[e._v("(http)")]),e._v(" / 443 "),r("em",[e._v("(https)")]),e._v(" erreichbar sein sollen, muss ein reverse proxy zum Einsatz kommen. HierfÃ¼r kommt "),r("a",{attrs:{href:"https://github.com/jwilder/nginx-proxy",target:"_blank",rel:"noopener noreferrer"}},[e._v("nginx-proxy"),r("OutboundLink")],1),e._v(" und "),r("a",{attrs:{href:"https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion",target:"_blank",rel:"noopener noreferrer"}},[e._v("nginx-proxy-le"),r("OutboundLink")],1),e._v(" (fÃ¼r das automatische LÃ¶sen von Let's Encrypt Zertifikaten) zum Einsatz."),r("br"),e._v("\nAlle Container die nun auch per http(s) erreichbar sein sollen, mÃ¼ssen nur noch zwei Anforderungen erfÃ¼llen:")]),e._v(" "),r("ol",[r("li",[e._v("Dem "),r("code",[e._v("nginx-proxy")]),e._v(" Docker Netzwerk hinzugefÃ¼gt sein.")]),e._v(" "),r("li",[e._v("Folgende Environment Variablen gesetzt haben (Hierbei natÃ¼rlich "),r("code",[e._v("foo")]),e._v(" durch korrekten Wert ersetzen):\n"),r("ul",[r("li",[r("code",[e._v("VIRTUAL_HOST=foo.gruppe-adler.de,www.foo.gruppe-adler.de")])]),e._v(" "),r("li",[r("code",[e._v("LETSENCRYPT_HOST=foo.gruppe-adler.de")])])])])]),e._v(" "),r("p",[r("img",{attrs:{src:t(477),alt:"container-structure"}})]),e._v(" "),r("h3",{attrs:{id:"watchtower"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#watchtower"}},[e._v("#")]),e._v(" Watchtower")]),e._v(" "),r("p",[e._v("Um die Entwicklung zu vereinfachen und ein Continuous Deployment zu gewÃ¤hrleisten, wird "),r("a",{attrs:{href:"https://github.com/containrrr/watchtower",target:"_blank",rel:"noopener noreferrer"}},[e._v("Watchtower"),r("OutboundLink")],1),e._v(" eingesetzt. Dieser Container prÃ¼ft periodisch ob auf Docker Hub eine neuere Versionen eines verwendeten Images zu VerfÃ¼gung steht. Falls eine neue Version gefunden wurde, lÃ¤dt watchtower das neue Image und  updated den betroffenen Container komplett automatisch."),r("br"),e._v("\nBei uns ist es so eingestellt, dass nur Container, bei denen es explizit eingeschaltet wurde, von Watchtower geupdated werden. Dies erfolgt durch das setzen des "),r("code",[e._v("com.centurylinklabs.watchtower.enable=true")]),e._v(" "),r("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/run/#set-metadata-on-container--l---label---label-file",target:"_blank",rel:"noopener noreferrer"}},[e._v("label"),r("OutboundLink")],1),e._v(". Mehr dazu lÃ¤sst sich in der "),r("a",{attrs:{href:"https://containrrr.github.io/watchtower/container-selection/",target:"_blank",rel:"noopener noreferrer"}},[e._v("watchtower Dokumentation"),r("OutboundLink")],1),e._v(" lesen.")]),e._v(" "),r("h2",{attrs:{id:"docker-compose-files"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-files"}},[e._v("#")]),e._v(" Docker Compose Files")]),e._v(" "),r("p",[e._v("Alle Docker Compose Konfigurationsdateien lassen sich unter "),r("code",[e._v("/etc/docker-configs/")]),e._v(" finden. Der gundlegende Aufbau ist wie folgt:")]),e._v(" "),r("pre",{staticClass:"vue-container"},[r("code",[r("p",[r("code",[e._v("/etc/docker-configs")]),e._v("\nâ”œâ”€â”€ "),r("code",[e._v("homepage")]),e._v(" "),r("em",[e._v("Hier befindet sich alles zur Homepage")]),e._v("\nâ”‚\nâ”œâ”€â”€ "),r("code",[e._v("blechadler")]),e._v(" "),r("em",[e._v("Hier befinden sich alles zum Blechadler")]),e._v("\nâ”‚     â”œâ”€â”€ docker-compose.yml "),r("em",[e._v("Docker Compose Konfiguration fÃ¼r Blechadler")]),e._v("\nâ”‚     â””â”€â”€ volumes "),r("em",[e._v("EnthÃ¤lt soft links zu allen docker volumes fÃ¼r Blechadler")]),e._v("\nâ”‚           â”œâ”€â”€ "),r("em",[e._v("[...]")]),e._v("\nâ”‚           â””â”€â”€ config "),r("em",[e._v("Link zu "),r("strong",[e._v("config")]),e._v(" volume")]),e._v("\nâ”‚\nâ””â”€â”€ "),r("em",[e._v("[...]")])]),e._v("\n")])]),r("h2",{attrs:{id:"cheat-sheet"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cheat-sheet"}},[e._v("#")]),e._v(" Cheat Sheet")]),e._v(" "),r("h3",{attrs:{id:"vm-neuststarten"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vm-neuststarten"}},[e._v("#")]),e._v(" VM neuststarten")]),e._v(" "),r("p",[r("code",[e._v("reboot")])]),e._v(" "),r("h3",{attrs:{id:"alle-container-auflisten"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#alle-container-auflisten"}},[e._v("#")]),e._v(" Alle Container auflisten")]),e._v(" "),r("p",[r("code",[e._v("docker ps -a")]),r("br"),e._v(" "),r("img",{attrs:{src:t(478),alt:"list-containers"}})]),e._v(" "),r("h3",{attrs:{id:"container-logs-einsehen"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#container-logs-einsehen"}},[e._v("#")]),e._v(" Container Logs einsehen")]),e._v(" "),r("p",[r("code",[e._v("docker logs foo")]),r("br"),e._v(" "),r("em",[e._v("Hierbei natÃ¼rlich foo durch den korrekten container namen ersetzten. Dieser kann in der Liste aller Container gefunden werden (siehe "),r("a",{attrs:{href:"#alle-container-auflisten"}},[e._v("Alle Container auflisten")]),e._v(")")])]),e._v(" "),r("h3",{attrs:{id:"eine-applikation-neu-starten"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eine-applikation-neu-starten"}},[e._v("#")]),e._v(" Eine Applikation (neu-)starten")]),e._v(" "),r("ol",[r("li",[e._v("In jeweilges Verzeichnis wechseln\n"),r("code",[e._v("cd /etc/docker-configs/foo")])]),e._v(" "),r("li",[e._v("Applikation starten\n"),r("code",[e._v("docker-compose up -d")])])]),e._v(" "),r("h3",{attrs:{id:"alle-unbenutzen-images-loschen"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#alle-unbenutzen-images-loschen"}},[e._v("#")]),e._v(" Alle unbenutzen Images lÃ¶schen")]),e._v(" "),r("p",[r("code",[e._v("docker rmi $(docker image ls -q)")]),r("br"),e._v("\n(Dieser Befehl versucht zwar alle Images zu lÃ¶schen, kann aber Images, die aktuell in Benutzung sind nicht lÃ¶schen ðŸ˜…)")])])}),[],!1,null,null,null);n.default=a.exports}}]);